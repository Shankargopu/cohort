-> pwd : The "pwd" command prints the full name (the full path) of current/working directory.  (print working directory)

-> cd : The cd command in Linux stands for change directory. It is used to change the current directory of the terminal.  (change directoty)

cd home : navigate to Home folder
cd home/shankar : navigate to shankar folder.

cd ..  : take one folder back (If I am in shankar folder than it navigates back to home folder)
cd ../..   : taks tow folders back (If I am in shankar folder it navigates back to parent of home directory)

-> ls  : The ls command is one of the more basic commands in Linux. It is designed to list the names and features of files and directories.  (list)

-> mkdir : mkdir command in Linux allows the user to create directories (also referred to as folders in some operating systems). This command can create multiple directories at once as well as set the permissions for the directories. (make directory)

mkdir test  : creates test folder
mkdir test2 test3 : creates 2 folders at a time.

mkdir test/test4  : creates test4 folder inside test

-> touch : touch command: It is used to create a file without any content.

touch txt.json txt.txt : creates two file at a time.

-> cat : Cat(concatenate) command is very frequently used in Linux. It reads data from the file and gives its content as output. It helps us to create, view, and concatenate files.

cat txt.txt : Prints the content of the file.

Even if we are on it's parent dir we can to `cat test/txt.txt' to print the content

-> vi :  It’s easy to invoke Vi. At the command line, you type vi <filename> to create a new file, or to edit an existing one.

$ vi filename.txt

$ vi <filename> — Open or edit a file.
i — Switch to Insert mode.
Esc — Switch to Command mode.
:w — Save and continue editing.
:wq or ZZ — Save and quit/exit vi.
:q! — Quit vi and do not save changes.
yy — Yank (copy) a line of text.
p — Paste a line of yanked text below the current line.
o — Open a new line under the current line.
O — Open a new line above the current line.
A — Append to the end of the line.
a — Append after the cursor’s current position.
I — Insert text at the beginning of the current line.
b — Go to the beginning of the word.
e — Go to the end of the word.
x — Delete a single character.
dd — Delete an entire line.
Xdd — Delete X number of lines.
Xyy — Yank X number of lines.
G — Go to the last line in a file.
XG — Go to line X in a file.
gg — Go to the first line in a file.
:num — Display the current line’s line number.
h — Move left one character.
j — Move down one line.
k — Move up one line.
l — Move right one character.


-> mv : The mv command moves files and directories from one directory to another or renames a file or directory. If you move a file or directory to a new directory, it retains the base file name

mv code code1 (renames code to code 1 if code 1 is not exists)

mv code1 homw (moves code1 folder inside homw folder. since here homw folder exists)


mv code homw/code1  (moves code to inside code1 folder which is inside homw if code1 does not exists than code renamed to code1 inside homw)

mv txt.txt home/code1 (moves txt file to code1)


-> cp : cp stands for a copy. This command is used to copy files or groups of files or directories. It creates an exact image of a file on a disk with a different file name. cp command requires at least two filenames in its arguments.


cp -r test1 test4   (copies test1 directory to test4) -r indicates recursive


-> rm : used to remove a driectory.

rm dir (removes directory)
rm -rf dir (removes directory as root user)



                                                         Advance commands

ls :  lists all the files/dir in the directory.

ls -l : gives the info of the files or directories present along with their permissions, last modfied, type of file etc.

ls -R : gives detailed all the subfolders/files persent in the directory i.e, recursively lists all the sub-directories and the files.


ls -t :  gives the list descending of their modification time. (lastest modifed first). 

ls -lt : gives the list ascending of their modification time along with the other details when did ls -l.

ls -la : it shows the hidden files as well.

ls -lr  : gives the list ascending of their modification time. (latest modified last)

ls -lR | grep .json  : gives all the json files recursively

ls *.js : gives all the js files present in that specific directory

ls fe* : gives all the files starts with fe



 

touch file_name : creates a new file.

cat file_name  : display the content of the file.

cat > file_name  : we can enter the text in this file

cat >> file_name : we can append the text to this file

we can combine both commands also

cat filename && rm filename  : It displays the content of the file and then removes that file.

mkdir dirname && cd dirname  : It creates the directory first and then change the directory to that.

mkdir -p dirname/dirname1  : we can create the directories recursively using -p tag.

ex : 

mkdir -p frontend/image
mkdir -p frontend/css



mv foldername1 foldername2  : it renamnes foldername1 to foldername2

ex : mv test1 test2  : now test1 renamed as test2


cp -r folder1 folder2 : copies the folder1 into folder2.

rm test.txt : removes the test file

rm -r folder : removes the folder



chmod : change mode


the chmod command is used to change the access mode of a file. The name is an abbreviation of change mode. Which states that every file and directory has a set of permissions that control the permissions like who can read, write or execute the file. In this the permissions have three categories: read, write, and execute simultaneously represented by `r`, `w` and `x`. These letters combine together to form a specific permission for a group of user.

to add any permission to user, group or others

for user : chmod u

for group : chmod g

for others : chmod o

adding execute permission for the user on the file1

-> chmod u+x file1

adding read permission for the user on the folder1

-> chmod -R u+r folder1

removing both read and write permission for the user on the test.txt

-> chmod u-rx test.txt

adding read,write and execute permission for the others on the test.txt

-> chmod o+rwx test.txt

adding read,write and execute permission for the group on the test.txt

->chmod g+rwx test.txt


we can also give or remove permissions using the numbers

read = 4
write = 2
execute = 1

adding read permission for user and read,write permission to the group and read, execute permission to the others
 
-> chmod 465 test.txt   

adding all permission to the user,group and others.

-> chmod 777 test.txt


-> echo "hello"  : displays hello on the shell.

-> echo $PATH : displays the path on the shell.

............................................................................................................................................................................................

 To get the first 10 rows from the file

-> head test.txt

To get the last romw from the file

-> tail test.txt

To get only certain rows : gives first 5 rows.

-> head -5 test.txt

To get last 10 rows

-> tail -10 test.txt

To get specific rows like from 10 to 15, we need to combine both the head and tail

tail +10 selects rows from 10th and head -5 gives the first 5 rows after 10.

right side of pipe operator takes the result of left side of pipe into consideration.

tail +10 test.txt | head -5









